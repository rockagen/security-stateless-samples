/*
 * %W% %E%
 *
 * Copyright (c) 2013, RIPPLETECH Inc. All rights reserved.
 * RIPPLETECH PROPRIETARY/CONFIDENTIAL
 */
package org.teamZF.onepay.spring.security;

import java.io.IOException;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.teamZF.onepay.model.po.AdminUser;
import org.teamZF.onepay.service.IAdminUserServ;

/**
 * <b>SPIRNG SECURITY 3.X 认证失败处理类封转</b>
 * 
 *  
 * 
 * @author AGEN
 * @version 1.0
 * @date 2012-6-10 下午5:20:00
 * @history
 * 
 */
public class SmartUrlAuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {

	//~ Instance fields ==================================================
	
	/**
	 * 服务
	 */
	private IAdminUserServ adminUserServ;
	
	
	//~ Methods ==================================================

	/**
	 * 重写onAuthenticationFailure方法,实现锁定用户功能
	 * 
	 * @see org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler#onAuthenticationFailure(javax.servlet.http.HttpServletRequest,
	 *      javax.servlet.http.HttpServletResponse,
	 *      org.springframework.security.core.AuthenticationException)
	 */
	@Override
	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
			AuthenticationException exception) throws IOException, ServletException {
		if(exception.getClass().equals(BadCredentialsException.class)){
			exception=handlerLocked(request.getParameter(UsernamePasswordAuthenticationFilter.SPRING_SECURITY_FORM_USERNAME_KEY));
		}
		super.onAuthenticationFailure(request, response, exception);
		

	}

	/**
	 * 处理是否锁定逻辑
	 * 
	 * @param userId
	 *            登录号
	 */
	private AuthenticationException handlerLocked(String userId) {

		AdminUser user = adminUserServ.getAdminUser(userId);
		if (user.getError_count() >= 5) {

			Long dateTime = user.getStateTime().getTime();
			// 1 DAY = 86 400 000 ms
			if(new Date().getTime()-dateTime <86400000){
				//一天之内输入6次错误密码,则锁定用户
				user.setEnabled(0);
				adminUserServ.save(user);
				return new DisabledException("账号被锁定!");
			}
		}else{
			// 错误次数+1
			user.setError_count(user.getError_count() + 1);
			// 最后登录时间
			user.setStateTime(new Date());
		}
		int onlyCount=6-user.getError_count();

		adminUserServ.save(user);
		return new BadCredentialsException("密码错误,你还有 "+onlyCount+" 次机会!");
	}

	// Getters and Setters...
	@Resource
	public void setAdminUserServ(IAdminUserServ adminUserServ) {
		this.adminUserServ = adminUserServ;
	}
}
